import * as fs from 'fs';
import * as Nearley from 'nearley';

/* eslint-disable @typescript-eslint/no-var-requires */
const Compile = require('nearley/lib/compile.js');
const Generate = require('nearley/lib/generate.js');
const nearleyGrammar = require('nearley/lib/nearley-language-bootstrapped.js');
/* eslint-enable @typescript-eslint/no-var-requires */

const resolvePath = (text: string) => {
  try {
    if (fs.statSync(text).isFile()) return fs.readFileSync(text, 'utf8');
    return text;
  } catch (e) {
    return text;
  }
};

const compileGrammar = (grammar: string, location: string) => {
  const parsed = new Nearley.Parser(nearleyGrammar).feed(grammar).results[0];
  const compiled = Compile(parsed, { args: [location] });
  const generated = Generate(compiled) as string;
  const cleaned = generated
    .split('\n')
    .filter((line) => line !== 'export default grammar;')
    .map((line) => {
      if (line === '// @ts-ignore')
        return (
          '/* eslint-disable @typescript-eslint/no-unused-vars */\n' +
          '/* eslint-disable @typescript-eslint/no-explicit-any */\n' +
          '/* eslint-disable @typescript-eslint/ban-types */\n' +
          '/* eslint-disable no-var */'
        );
      if (line === 'interface NearleyToken {  value: any;')
        return (
          'interface NearleyToken {\n' +
          'value: any;\n' +
          'offset: number;\n' +
          'text: string;\n' +
          'lineBreaks: number;\n' +
          'line: number;\n' +
          'col: number;\n'
        );
      if (line === '  formatError: (token: NearleyToken) => string;')
        return '  formatError: (token: NearleyToken, message?: string | undefined) => string;';
      return line;
    })
    .join('\n');

  return `
import * as Nearley from 'nearley';

/** Generated by Nearley.js **/
${cleaned}
/** End **/

const CompiledParser = new (Nearley.Parser as any)(grammar).grammar;
`;
};

export const compile = (
  grammar: string,
  location: string,
  destination?: string,
): string => {
  const uncompiledGrammar = '@preprocessor typescript\n' + resolvePath(grammar);
  const compiledGrammar = compileGrammar(uncompiledGrammar, location);
  const result = `
${compiledGrammar}
const parse = (input: string): any => (new Nearley.Parser(CompiledParser)).feed(input).results[0];
export default parse;
`;

  if (destination) fs.writeFileSync(destination, result);
  return result;
};
