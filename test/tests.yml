Commands:
  # Test if the puts command works
  Puts:
    - name: Simple
      input:
        type: raw
        value: 'puts HelloWorld'
      stdout:
        type: raw
        value: "HelloWorld\n"

    - name: 'With -nonewline'
      input:
        type: raw
        value: 'puts -nonewline HelloWorld'
      stdout:
        type: raw
        value: HelloWorld

    - name: 'With longer text'
      input:
        type: raw
        value: 'puts "Hello World!"'
      stdout:
        type: raw
        value: "Hello World!\n"

  Expr:
    - name: Simple
      input:
        type: raw
        value: 'expr 3'
      output:
        type: raw
        value: '3'
    - name: Simple math
      input:
        type: raw
        value: 'expr (3 +6) * (5 % 3) / 7 - 3^2'
      output:
        type: raw
        value: '-6.428571428571429'
    - name: Math with variables
      input:
        type: raw
        value: 'set five 5; expr 3 + $five'
      output:
        type: raw
        value: '8'

  # Test the functionality of variables
  'Set and Unset':
    - name: Simple
      input:
        type: raw
        value: 'set var HelloWorld'
      output:
        type: raw
        value: HelloWorld

    - name: 'Print variable'
      input:
        type: raw
        value: 'set var HelloWorld; puts $var;'
      stdout:
        type: raw
        value: "HelloWorld\n"

    - name: 'Retrieve variable'
      input:
        type: raw
        value: 'set var HelloWorld; puts $var; set var;'
      stdout:
        type: raw
        value: "HelloWorld\n"
      output:
        type: raw
        value: HelloWorld

    - name: 'Unset variable'
      input:
        type: raw
        value: 'set var HelloWorld; puts $var; unset var;'
      stdout:
        type: raw
        value: "HelloWorld\n"

    - name: 'Set variable and change'
      input:
        type: raw
        value: 'set var HelloWorld; puts $var; set var HelloEarth; puts $var;'
      stdout:
        type: raw
        value: "HelloWorld\nHelloEarth\n"

    - name: 'Set variable, unset variable and set again'
      input:
        type: raw
        value: 'set var HelloWorld; puts $var; unset var; set var HelloEarth; puts $var;'
      stdout:
        type: raw
        value: "HelloWorld\nHelloEarth\n"

  List:
    - name: 'Simple'
      input:
        type: raw
        value: 'puts [list hello this is a list]'
      stdout:
        type: raw
        value: "hello this is a list\n"

Functionality:
  # Test if TCL is able to load files
  Files:
    - name: 'Hello World example'
      input:
        type: file
        value: 'scripts/HelloWorld.tcl'
      stdout:
        type: file
        value: 'results/HelloWorld.txt'

  # Test if comments are working
  Comments:
    - name: Simple
      input:
        type: raw
        value: '# This is a comment'

    - name: 'Error on missing semicolon'
      input:
        type: raw
        value: 'puts {Bad comment syntax example}   # *Error* - no semicolon!'
      output:
        type: error
        value: ''

  Arguments:
    Simple:
      - name: Simple
        input:
          type: raw
          value: 'puts HelloWorld'
        stdout:
          type: raw
          value: "HelloWorld\n"

    Quotes:
      - name: 'Simple'
        input:
          type: raw
          value: 'puts "-nonewline" "Hello World!"'
        stdout:
          type: raw
          value: 'Hello World!'
      - name: 'Uneven quotes'
        input:
          type: raw
          value: 'puts "-nonewline" "Hello"World!"'
        output:
          type: error
      - name: 'Touching quotes'
        input:
          type: raw
          value: 'puts "-nonewline" "Hello""World!"'
        output:
          type: error
      - name: 'Text after quotes'
        input:
          type: raw
          value: 'puts "-nonewline" "Hello World!"Hello'
        output:
          type: error
      - name: 'Text before spaced quotes'
        input:
          type: raw
          value: 'puts "-nonewline" Hello"Hello World!"'
        output:
          type: error
      - name: 'Text before unspaced quotes'
        input:
          type: raw
          value: 'puts "-nonewline" Hello"HelloWorld!"'
        stdout:
          type: raw
          value: 'Hello"HelloWorld!"'

    Braces:
      - name: 'Simple'
        input:
          type: raw
          value: 'puts {Hello World!}'
        stdout:
          type: raw
          value: "Hello World!\n"
      - name: 'Nested braces'
        input:
          type: raw
          value: 'puts {Hello World!, {{Hello} Earth!}}'
        stdout:
          type: raw
          value: "Hello World!, {{Hello} Earth!}\n"
      - name: 'Nested braces in quotes'
        input:
          type: raw
          value: 'puts "Hello World!, {{Hello} Earth!}"'
        stdout:
          type: raw
          value: "Hello World!, {{Hello} Earth!}\n"
      - name: 'Wrongly Nested braces'
        input:
          type: raw
          value: 'puts {Hello World!, {{Hello Earth!}}'
        output:
          type: error
      - name: 'Touching braces'
        input:
          type: raw
          value: 'puts "-nonewline" {Hello}{World!}'
        output:
          type: error
      - name: 'Text after braces'
        input:
          type: raw
          value: 'puts "-nonewline" {Hello World!}Hello'
        output:
          type: error
      - name: 'Text before spaced quotes'
        input:
          type: raw
          value: 'puts "-nonewline" Hello{Hello World!}'
        output:
          type: error
      - name: 'Text before unspaced quotes'
        input:
          type: raw
          value: 'puts "-nonewline" Hello{HelloWorld!}'
        stdout:
          type: raw
          value: 'Hello{HelloWorld!}'
    Brackets:
      - name: Simple
        input:
          type: raw
          value: 'puts -nonewline [expr 3]'
        stdout:
          type: raw
          value: '3'
      - name: Nested
        input:
          type: raw
          value: 'puts -nonewline [expr [expr 3]]'
        stdout:
          type: raw
          value: '3'
      - name: Touching
        input:
          type: raw
          value: 'puts -nonewline [expr 3][expr 3]'
        stdout:
          type: raw
          value: '33'
      - name: Text before
        input:
          type: raw
          value: 'puts -nonewline Hello[expr 3]'
        stdout:
          type: raw
          value: 'Hello3'
      - name: Text after
        input:
          type: raw
          value: 'puts -nonewline [expr 3]Hello'
        stdout:
          type: raw
          value: '3Hello'

  # Test backslash substitution
  'Backslash Substitution':
    # Simple substitution like \n
    Simple:
      - name: Audible Bell
        input:
          type: raw
          value: 'puts -nonewline "Hello\a World"'
        stdout:
          type: raw
          value: "Hello\a World"
      - name: Backspace
        input:
          type: raw
          value: 'puts -nonewline "Hello\b World"'
        stdout:
          type: raw
          value: "Hello\b World"
      - name: From Feed
        input:
          type: raw
          value: 'puts -nonewline "Hello\f World"'
        stdout:
          type: raw
          value: "Hello\f World"
      - name: New Line
        input:
          type: raw
          value: 'puts -nonewline "Hello\n World"'
        stdout:
          type: raw
          value: "Hello\n World"
      - name: Carriage Return
        input:
          type: raw
          value: 'puts -nonewline "Hello\r World"'
        stdout:
          type: raw
          value: "Hello\r World"
      - name: Tab
        input:
          type: raw
          value: 'puts -nonewline "Hello\t World"'
        stdout:
          type: raw
          value: "Hello\t World"
      - name: Vertical Tab
        input:
          type: raw
          value: 'puts -nonewline "Hello\v World"'
        stdout:
          type: raw
          value: "Hello\v World"

    # Special substitution
    Special:
      Octal:
        - name: Empty
          input:
            type: raw
            value: 'puts -nonewline "Hello\0 World"'
          stdout:
            type: raw
            value: "Hello\0 World"
        - name: Single
          input:
            type: raw
            value: 'puts -nonewline "Hello\07 World"'
          stdout:
            type: raw
            value: "Hello\a World"
        - name: Double
          input:
            type: raw
            value: 'puts -nonewline "Hello\077 World"'
          stdout:
            type: raw
            value: 'Hello? World'
        - name: Triple
          input:
            type: raw
            value: 'puts -nonewline "Hello\0777 World"'
          stdout:
            type: raw
            value: 'Hello?7 World'
      Hexadecimal:
        - name: Empty
          input:
            type: raw
            value: 'puts -nonewline "Hello\x World"'
          stdout:
            type: raw
            value: 'Hellox World'
        - name: Single Decimal
          input:
            type: raw
            value: 'puts -nonewline "Hello\x9 World"'
          stdout:
            type: raw
            value: "Hello\t World"
        - name: Single Letter
          input:
            type: raw
            value: 'puts -nonewline "Hello\xb World"'
          stdout:
            type: raw
            value: "Hello\v World"
        - name: Single Capital
          input:
            type: raw
            value: 'puts -nonewline "Hello\xB World"'
          stdout:
            type: raw
            value: "Hello\v World"
        - name: Double
          input:
            type: raw
            value: 'puts -nonewline "Hello\x41 World"'
          stdout:
            type: raw
            value: 'HelloA World'
        - name: Double Mixed
          input:
            type: raw
            value: 'puts -nonewline "Hello\x4D World"'
          stdout:
            type: raw
            value: 'HelloM World'
        - name: Triple
          input:
            type: raw
            value: 'puts -nonewline "Hello\x412 World"'
          stdout:
            type: raw
            value: 'HelloA2 World'
      Unicode:
        - name: Empty
          input:
            type: raw
            value: 'puts -nonewline "Hello\u World"'
          stdout:
            type: raw
            value: 'Hellou World'
        - name: Single
          input:
            type: raw
            value: 'puts -nonewline "Hello\u9 World"'
          stdout:
            type: raw
            value: "Hello\t World"
        - name: Double
          input:
            type: raw
            value: 'puts -nonewline "Hello\u41 World"'
          stdout:
            type: raw
            value: 'HelloA World'
        - name: Triple
          input:
            type: raw
            value: 'puts -nonewline "Hello\u109 World"'
          stdout:
            type: raw
            value: 'Helloĉ World'
        - name: Quadrouple
          input:
            type: raw
            value: 'puts -nonewline "Hello\u246f World"'
          stdout:
            type: raw
            value: 'Hello⑯ World'
        - name: Quadrouple with leading zeros
          input:
            type: raw
            value: 'puts -nonewline "Hello\u0041 World"'
          stdout:
            type: raw
            value: 'HelloA World'
        - name: Quintuple
          input:
            type: raw
            value: 'puts -nonewline "Hello\u0041A World"'
          stdout:
            type: raw
            value: 'HelloAA World'

    Argument types:
      - name: Simple
        input:
          type: raw
          value: 'puts -nonewline Hello\nWorld'
        stdout:
          type: raw
          value: "Hello\nWorld"
      - name: Quotes
        input:
          type: raw
          value: 'puts -nonewline "Hello\nWorld"'
        stdout:
          type: raw
          value: "Hello\nWorld"
      - name: Braces
        input:
          type: raw
          value: 'puts -nonewline {Hello\nWorld}'
        stdout:
          type: raw
          value: 'Hello\nWorld'

    Escape:
      - name: Braces
        input:
          type: raw
          value: 'puts -nonewline {Hello\}World}'
        stdout:
          type: raw
          value: 'Hello\}World'
      - name: Braces error
        input:
          type: raw
          value: 'puts -nonewline {Hello}World}'
        output:
          type: error
      - name: Quotes
        input:
          type: raw
          value: 'puts -nonewline "Hello\"World"'
        stdout:
          type: raw
          value: 'Hello"World'
      - name: Quotes error
        input:
          type: raw
          value: 'puts -nonewline "Hello"World"'
        output:
          type: error
      - name: Newlines in quotes
        input:
          type: raw
          value: "puts -nonewline \"Hello\\\nWorld\""
        stdout:
          type: raw
          value: 'Hello World'
      - name: Newlines in braces
        input:
          type: raw
          value: "puts -nonewline {Hello\\\nWorld}"
        stdout:
          type: raw
          value: 'Hello World'
      - name: Variables
        input:
          type: raw
          value: 'set test hi; puts -nonewline "This is a \$test and a $test"'
        stdout:
          type: raw
          value: 'This is a $test and a hi'
      - name: Brackets
        input:
          type: raw
          value: 'set test [puts -nonewline \[]'
        stdout:
          type: raw
          value: '['

  'Square Bracket Substitution':
    - name: Simple
      input:
        type: raw
        value: 'puts -nonewline [expr 3]'
      stdout:
        type: raw
        value: '3'
    - name: Nested
      input:
        type: raw
        value: 'puts -nonewline [expr [expr 3 * 3] * 2]'
      stdout:
        type: raw
        value: '18'
    - name: Backslash
      input:
        type: raw
        value: 'set test [puts [puts hi\nhi]]'
      stdout:
        type: raw
        value: "hi\nhi\n\n"
    - name: Variables
      input:
        type: raw
        value: 'set test 5; puts -nonewline [expr [expr $test * 3] * 2]'
      stdout:
        type: raw
        value: '30'

  Variables:
    Simple:
      - name: 'Simple'
        input:
          type: raw
          value: 'set var HelloWorld; puts $var;'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Bigger value'
        input:
          type: raw
          value: 'set var "Hello World!"; puts $var;'
        stdout:
          type: raw
          value: "Hello World!\n"
      - name: 'In middle of sentence'
        input:
          type: raw
          value: 'set var "Hello World"; puts "I like to say $var!";'
        stdout:
          type: raw
          value: "I like to say Hello World!\n"
      - name: 'In middle of brace sentence'
        input:
          type: raw
          value: 'set var "Hello World"; puts {I like to say $var!};'
        stdout:
          type: raw
          value: "I like to say $var!\n"
      - name: 'Double in middle of sentence'
        input:
          type: raw
          value: 'set var "Hello World"; puts "I like to say $var$var!";'
        stdout:
          type: raw
          value: "I like to say Hello WorldHello World!\n"
      - name: 'In front of square bracket'
        input:
          type: raw
          value: 'set var "Hello World"; puts $var[expr 3];'
        stdout:
          type: raw
          value: "Hello World3\n"
      - name: 'Behind of square bracket'
        input:
          type: raw
          value: 'set var "Hello World"; puts [expr 3]$var;'
        stdout:
          type: raw
          value: "3Hello World\n"  
    Array:
      - name: 'Simple'
        input:
          type: raw
          value: 'set var(0) HelloWorld; puts $var(0);'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Nested'
        input:
          type: raw
          value: 'set index 2; set var($index) HelloWorld; puts $var($index);'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Double Nested'
        input:
          type: raw
          value: 'set index 2; set double($index) 5; set var($double($index)) HelloWorld; puts $var($double($index));'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Using Square Brackets'
        input:
          type: raw
          value: 'set var([expr 3 * 3]) HelloWorld; puts $var([expr 3 * 3]);'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Using Nested Square Brackets'
        input:
          type: raw
          value: 'set multiplier 3; set var([expr 3 * 3]) HelloWorld; puts $var([expr $multiplier * 3]);'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Unset and reassign'
        input:
          type: raw
          value: 'set var(0) HelloWorld; puts $var(0); unset var; set var hello; puts $var;'
        stdout:
          type: raw
          value: "HelloWorld\nhello\n"
      - name: 'Error on whole use'
        input:
          type: raw
          value: 'set var(0) HelloWorld; puts $var;'
        output:
          type: error
      - name: 'Error on invalid index'
        input:
          type: raw
          value: 'set var(0) HelloWorld; puts $var(1);'
        output:
          type: error
      - name: 'Error on reassign'
        input:
          type: raw
          value: 'set var(0) HelloWorld; puts $var(0); set var hello'
        output:
          type: error
      - name: 'Error on unfinished bracket'
        input:
          type: raw
          value: 'set var(0) HelloWorld; puts $var(0;'
        output:
          type: error
    Object:
      - name: 'Simple'
        input:
          type: raw
          value: 'set var(test) HelloWorld; puts $var(test);'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'With space'
        input:
          type: raw
          value: 'set "var(test this)" HelloWorld; puts $var(test this);'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Nested'
        input:
          type: raw
          value: 'set wow akey; set var($wow) HelloWorld; puts $var($wow);'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Double Nested'
        input:
          type: raw
          value: 'set keyholder tired; set addition jup; set "wow($keyholder $addition)" akey; set var($wow($keyholder $addition)) HelloWorld; puts $var($wow($keyholder $addition));'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Using Square Brackets'
        input:
          type: raw
          value: 'set var([list wow hi]) HelloWorld; puts $var(wow hi);'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Using Nested Square Brackets'
        input:
          type: raw
          value: 'set multiplier thing; set var([list thing three]) HelloWorld; puts $var([list $multiplier three]);'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Unset and reassign'
        input:
          type: raw
          value: 'set var(hello) HelloWorld; puts $var(hello); unset var; set var hello; puts $var;'
        stdout:
          type: raw
          value: "HelloWorld\nhello\n"
      - name: 'Error on whole use'
        input:
          type: raw
          value: 'set var(hello) HelloWorld; puts $var;'
        output:
          type: error
      - name: 'Error on invalid index'
        input:
          type: raw
          value: 'set var(hello) HelloWorld; puts $var(wow);'
        output:
          type: error
      - name: 'Error on reassign'
        input:
          type: raw
          value: 'set var(hello) HelloWorld; puts $var(hello); set var hello'
        output:
          type: error
      - name: 'Error on unfinished bracket'
        input:
          type: raw
          value: 'set var(hello) HelloWorld; puts $var(hello;'
        output:
          type: error
    Brace Variables:
      - name: 'Simple'
        input:
          type: raw
          value: 'set var HelloWorld; puts ${var};'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Weird chars'
        input:
          type: raw
          value: 'set {*!@&#^#^@!!*^#} HelloWorld; puts ${*!@&#^#^@!!*^#};'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Weird chars array'
        input:
          type: raw
          value: 'set {*!@&#^#^@!!*^#(3)} HelloWorld; puts ${*!@&#^#^@!!*^#(3)};'
        stdout:
          type: raw
          value: "HelloWorld\n"
      - name: 'Weird chars object'
        input:
          type: raw
          value: 'set {*!@&#^#^@!!*^#(!@&#^#^@!)} HelloWorld; puts ${*!@&#^#^@!!*^#(!@&#^#^@!)};'
        stdout:
          type: raw
          value: "HelloWorld\n"


#Execute examples from ./scripts
Examples:
  - name: Puts
    input:
      type: file
      value: 'scripts/puts.tcl'
    stdout:
      type: file
      value: 'results/puts.txt'

  - name: Variables
    input:
      type: file
      value: 'scripts/set.tcl'
    stdout:
      type: file
      value: 'results/set.txt'

  - name: Substitution
    input:
      type: file
      value: 'scripts/substitution.tcl'
    stdout:
      type: file
      value: 'results/substitution.txt'

  - name: 'Curly brace grouping'
    input:
      type: file
      value: 'scripts/grouping.tcl'
    stdout:
      type: file
      value: 'results/grouping.txt'

  - name: 'Square bracket evaluation and substitution'
    input:
      type: file
      value: 'scripts/square_evaluation.tcl'
    stdout:
      type: file
      value: 'results/square_evaluation.txt'

  - name: 'Math one'
    input:
      type: file
      value: 'scripts/math_1.tcl'
    stdout:
      type: file
      value: 'results/math_1.txt'

  - name: 'Math two'
    input:
      type: file
      value: 'scripts/math_2.tcl'
    stdout:
      type: file
      value: 'results/math_2.txt'

  - name: 'Math three'
    input:
      type: file
      value: 'scripts/math_3.tcl'
    stdout:
      type: file
      value: 'results/math_3.txt'
